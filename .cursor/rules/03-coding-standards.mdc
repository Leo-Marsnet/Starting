---
description: 
globs: 
alwaysApply: true
---
# 03. 编码实践与标准

## 类型安全
*   追求 **100% 的 TypeScript 类型覆盖率**。避免使用 `any` 类型，除非有绝对必要的理由并加以注释说明。

## 命名约定
*   **清晰性优先**: 命名应清晰、表意明确，本身即是最好的注释。
*   **组件**: 使用大驼峰法 (PascalCase)，如 `UserProfileCard.tsx`。
*   **函数/变量**: 使用小驼峰法 (camelCase)，如 `fetchUserData`。
*   **布尔值**: 使用 `is`, `has`, `should` 等作为前缀，如 `isUserLoggedIn`。
*   **事件处理函数**: 使用 `handle` 或 `on` 作为前缀，如 `handleClick`。

## 性能优化
*   **主动应用**: 默认对可能重复渲染的组件使用 `React.memo`。
*   **精细控制**: 使用 `useMemo` 缓存昂贵的计算结果，使用 `useCallback` 来稳定函数引用。
*   **长列表**: 必须使用虚拟化技术（如 `TanStack Virtual`）来处理大数据量列表的渲染。

## 状态管理策略
*   **服务器状态**: **始终**使用 `TanStack Query` 管理，包括数据的获取、缓存、同步和更新。
*   **全局客户端状态**: **仅当**某些状态需在多个无直接父子关系的组件间共享时（如：主题切换、用户认证信息），才使用 `Zustand`。
*   **本地组件状态**: 优先使用 React 自带的 `useState` 或 `useReducer`，避免过度设计。

## 代码质量
*   **零容忍**: 保持 ESLint 和 Prettier 检查**零错误、零警告**。
*   **DRY 原则**: 避免重复代码 (Don't Repeat Yourself)。

## 错误处理
*   使用 `try-catch` 块和错误边界（Error Boundaries）优雅地处理运行时错误，并向用户提供有意义的反馈。

## 环境变量
*   所有需要暴露给客户端的环境变量，必须以 `VITE_` 作为前缀。
*   在 `.env.example` 文件中记录所有必需的环境变量及其用途，但不要提交任何敏感值。

## 注释与文档规范
*   **JSDoc 标准**: 对所有非简单的函数、自定义Hook、复杂组件，都必须添加 JSDoc 风格的块注释。注释的核心是解释"为什么"和"如何用"，而不仅仅是"做什么"。
*   **文件头注释**: 对职责复杂或重要的文件（如核心 `utils`），可在文件顶部添加注释，说明其核心用途和维护原则。
